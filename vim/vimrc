if has('nvim') || has('termguicolors')
    set termguicolors
endif

colorscheme challenger_deep
let g:challenger_deep_termcolors = 16

set encoding=utf-8

call plug#begin('~/.vim/plugged')

Plug 'itchyny/lightline.vim'
Plug 'unblevable/quick-scope'
Plug 'wellle/targets.vim'
Plug 'machakann/vim-sandwich'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-fugitive'
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'thaerkh/vim-indentguides'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-vinegar'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-repeat'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/echodoc.vim'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
Plug 'kovetskiy/sxhkd-vim'
Plug 'triglav/vim-visual-increment'
Plug 'tpope/vim-surround'
"Plug 'ludovicchabant/vim-gutentags'

call plug#end()

nnoremap <SPACE> <Nop>
let mapleader = " "

filetype plugin on

syntax on
set background=dark

set hidden
set number
set autoindent

set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab

set shell=/bin/zsh
set ruler
set ignorecase
set smartcase
set backspace=indent,eol,start
"set laststatus=2
set relativenumber
"set matchpairs+=<:>

set mouse=a

let g:session_autoload = 'no'

" Persistent undo
set undofile
set undodir=~/.vim/undodir

"FZF
nnoremap <silent> <C-p> :GFiles<CR>

" Search through git tracked files
nmap <Leader>f :Files<CR>
" Search through all files
nmap <Leader>F :GFiles<CR>
" Navigate open buffers
nmap <Leader>b :Buffers<CR>
" Search buffer history
nmap <Leader>h :History<CR>
" Search for tags in current buffer
nmap <Leader>t :BTags<CR>
" Search for tags in project
nmap <Leader>T :Tags<CR>
" Search for lines in current buffer
nmap <Leader>l :BLines<CR>
" Search for lines in all buffers
nmap <Leader>L :Lines<CR>
" Search through command history
nmap <Leader>c :Commands<CR>

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~30%' }

"ECHODOC
set cmdheight=2
set noshowmode

"COC
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif " Close preview window when done
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

"Coc-Highlight
autocmd FileType json syntax match Comment +\/\/.\+$+

" c-j c-k for moving in snippet
"imap <expr> <c-u> ncm2_ultisnips#expand_or("\<Plug>(ultisnips_expand)", 'm')
"smap <c-u> <Plug>(ultisnips_expand)
imap <c-u> <Plug>(ultisnips_expand)
let g:UltiSnipsExpandTrigger        = "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger   = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger  = "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0

"LIGHTLINE
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
            \ 'colorscheme': 'challenger_deep',
            \ 'active': {
            \   'left': [
            \     [ 'mode', 'paste' ],
            \     [ 'git', 'diagnostic', 'cocstatus', 'filename', 'method' ]
            \   ],
            \   'right':[
            \     [ 'filetype', 'fileencoding', 'lineinfo', 'percent' ],
            \     [ 'blame' ]
            \   ],
            \ },
            \ 'component_function': {
            \   'cocstatus': 'coc#status',
            \   'currentfunction': 'CocCurrentFunction',
            \   'blame': 'LightlineGitBlame'
            \ },
            \ }

function! LightlineGitBlame() abort
    let blame = get(b:, 'coc_git_blame', '')
    " return blame
    return winwidth(0) > 120 ? blame : ''
endfunction

"GITGUTTER
set updatetime=100
let g:gitgutter_override_sign_column_highlight = 0

"HELPING VIM WORK BETTER WITH GIT
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$' "Highlight commit merge conflict markers

""CTRL-P
"" Set no max file limit
"let g:ctrlp_max_files = 0
"" Search from current directory instead of project root
"let g:ctrlp_working_path_mode = 0

"map F1 key to :w
nmap <F1> :w<CR>
imap <F1> <Esc>:w<CR>

"" Enable folding
"set foldmethod=indent
"set foldlevel=99
"
"" Enable folding with the spacebar
"nnoremap <space> za
"" Show doctrings
"let g:SimpylFold_docstring_preview=1

"making sure mouse works correctly
if !has('nvim')
    if has("mouse_sgr")
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    end
endif

let g:python3_host_prog='/home/aquamarine/.pyenv/shims/python3'
let g:python_host_prog='/home/aquamarine/.pyenv/shims/python2'

" GUTENTAGS
"let g:gutentags_add_default_project_roots = 0 
"let g:gutentags_project_root = ['package.json', 'Cargo.toml', '.git']
"let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')
"let g:gutentags_generate_on_write = 1
"let g:gutentags_generate_on_new = 1
"let g:gutentags_generate_on_missing = 1
"let g:gutentags_generate_on_write = 1
"let g:gutentags_generate_on_empty_buffer = 0
"let g:gutentags_ctags_extra_args = ['--tag-relative=yes', '--fields=+ailmnS']
"let g:gutentags_ctags_exclude = ['.git', '.svg', '.hg','/tests/', 'build', 'dist', 'sites//files/', 'bin', 'node_modules', 'bower_components', 'cache', 'compiled', 'docs', 'example', 'bundle', 'vendor', '.md', '-lock.json', '.lock', 'bundle.js', 'build.js', '.rc', '.json', '.min.', '.map', '.bak', '.zip', '.pyc', '.class', '.sln', '.Master', '.csproj', '.tmp', '.csproj.user', '.cache', '.pdb', 'tags', 'cscope.', '.css', '.less', '.scss', '.exe', '.dll', '.mp3', '.ogg', '.flac', '.swp', '.swo', '.bmp', '.gif', '.ico', '.jpg', '.png', '.rar', '.zip', '.tar', '.tar.gz', '.tar.xz', '.tar.bz2', '.pdf', '.doc', '.docx', '.ppt', '.pptx']

